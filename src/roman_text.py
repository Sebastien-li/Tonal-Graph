""" Module for the RomanText class """

from fractions import Fraction
import music21
import numpy as np
from src.tonal_graph import TonalGraph
from src.utils import display_float
from src.music_theory_classes import Pitch

class RomanText:
    """ Class for the roman text representation of an analysis """
    def __init__(self, qualities=None, mode_list=None):
        self.text = ''
        self.rn_list = []
        self.duration_divisor = 1
        self.qualities = qualities
        self.mode_list = mode_list

    @classmethod
    def from_tonal_graph(cls, tonal_graph:TonalGraph):
        """ Creates a roman text from a tonal graph"""
        roman_text = cls()
        roman_text.rn_list = []
        roman_text.qualities = tonal_graph.qualities
        roman_text.mode_list = tonal_graph.mode_list
        roman_text.duration_divisor = tonal_graph.duration_divisor

        text = f'Composer: {tonal_graph.rt.note_graph.score.composer}'\
               f'\nTitle: {tonal_graph.rt.note_graph.score.title}'\
               f'\nAnalyst: Automatically generated by the Tonal Graph method\n'

        current_tonality = ''
        current_chord = (0,0,0,0)
        current_measure = -1
        current_time_sig = ''
        for node in tonal_graph.shortest_path:
            rn = RomanNumeral.from_tonal_graph_node(tonal_graph, node['id'])
            roman_text.rn_list.append(rn)
            real_onset = Fraction(node['onset'],tonal_graph.duration_divisor)
            measure, beat = tonal_graph.rt.note_graph.score.onset_to_measure_and_beat(real_onset)
            time_sig = tonal_graph.rt.note_graph.score.onset_to_ts(real_onset).ratioString
            beat = display_float(beat, 2)
            measure_label = measure[1]
            pitch = Pitch(int(node['tonic_diatonic']),int(node['tonic_chromatic']))
            if time_sig != current_time_sig:
                text += f'\nTime Signature: {time_sig}\n'
                current_time_sig = time_sig
            if measure_label != current_measure:
                text += f'\nm{measure_label} '
            if current_tonality != f"{pitch}{node['mode']}":
                text += f"{str(pitch).upper() if node['mode']=='M' else str(pitch).lower()}: "
            if current_chord != repr(rn):
                text += f"b{beat} " if beat != "1" else ""
                text += f"{rn.full_name} "
            current_tonality = f'{pitch}{node["mode"]}'
            current_measure = measure_label
            current_chord = repr(rn)
        roman_text.text = text
        return roman_text

    def __repr__(self):
        return self.text

    def __str__(self):
        return self.text

    def save(self, file_path):
        """ Save the roman text to a file """
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(self.text)

    def compare(self, file_path):
        """ Compare with a rntxt file """
        m21_rntxt = music21.converter.parse(file_path, format="romantext")
        m21_rntxt = m21_rntxt.recurse().stream()
        m21_rntxt = m21_rntxt.getElementsByClass(music21.roman.RomanNumeral).stream()
        self_idx = 0
        m21_idx = 0
        accuracy = 0
        while True:
            self_rn = self.rn_list[self_idx]
            m21_rn = m21_rntxt[m21_idx]
            m21_rn = untonicize(m21_rn)
            m21_rn = RomanNumeral.from_music21_rn(m21_rn)
            m21_idx += 1

            # if True:
            #     accuracy += min(self_rn['duration']/self.duration_divisor,m21_rn.quarterLength)
            # if self_idx + 1 >= len(self.rn_list) or m21_idx + 1 >= len(m21_rntxt) :
            #     break
            # next_rn_onset = self.rn_list[self_idx + 1].onset
            # next_m21_onset = m21_rntxt[m21_idx + 1].offset
            # if next_rn_onset <= next_m21_onset:
            #     self_idx += 1
            # if next_rn_onset >= next_m21_onset:
            #     m21_idx += 1

        return accuracy / (self_rn.onset + self_rn.duration)

class RomanNumeral:
    """ Class for a roman numeral with the inversion and the key"""
    def __init__(self, degree, figure, quality, inversion, key_tonic, mode, onset=0, duration=1):
                                    #Example : viio/65 in D minor
        self.degree = degree                    # VII
        self.figure = figure                    # viio/7
        self.quality = quality                  # o/7
        self.inversion = inversion              # 1
        self.key_tonic = key_tonic              # D
        self.mode = mode                        # minor
        self.full_name = self.get_full_name()   # viio/65
        self.full_name_with_key = repr(self)    # viio/65 in D minor
        self.onset = onset                      # Fraction in quarter length
        self.duration = duration                # Fraction in quarter length

    def get_full_name(self):
        """ Returns the full name of the roman numeral"""
        if self.quality.cardinality == 3:
            tg_inversion_name = ['','6','65'][self.inversion]
            full_name = self.figure + tg_inversion_name
        elif self.quality.cardinality  == 4:
            tg_inversion_name = ['7','65','43','2'][self.inversion]
            full_name = self.figure.replace('7',tg_inversion_name)
        return full_name

    def __repr__(self):
        return f'{self.full_name} in {self.key_tonic} {"major" if self.mode=="M" else "minor"}'

    @classmethod
    def from_tonal_graph_node(cls, tonal_graph:TonalGraph, node_idx:int):
        """Transforms a tonal graph node into a RomanNumeral object"""
        node = tonal_graph.nodes[node_idx]
        key_tonic = Pitch(int(node['tonic_diatonic']),int(node['tonic_chromatic']))
        tg_mode = [x for x in tonal_graph.mode_list if x.name == node['mode']][0]
        tg_rn_figure = [rn for rn in tg_mode if rn.label == node['label']][0]
        degree = tg_rn_figure.figure
        figure = tg_rn_figure.label
        quality = tonal_graph.qualities[tg_rn_figure.quality]
        inversion = node['inversion']
        onset = Fraction(node['onset'],tonal_graph.duration_divisor)
        duration = Fraction(node['duration'],tonal_graph.duration_divisor)
        return cls(degree, figure, quality, inversion, key_tonic, node['mode'], onset, duration)

    @classmethod
    def from_music21_rn(cls, rn:music21.roman.RomanNumeral):
        """Transforms a music21 roman numeral into a RomanNumeral object"""
        degree = ['I','II','III','IV','V','VI','VII'][rn.scaleDegree-1]



def untonicize(rn: music21.roman.RomanNumeral):
    """ Removes tonicization from a music21 roman numeral """
    if rn.secondaryRomanNumeral is None:
        return rn
    new_key = rn.secondaryRomanNumeralKey
    return music21.roman.RomanNumeral(rn.primaryFigure, new_key)
